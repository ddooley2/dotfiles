let mapleader =" "
let maplocalleader = ","

" https://gist.github.com/miguelgrinberg/527bb5a400791f89b3c4da4bd61222e4
" plugins
let need_to_install_plugins = 0
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    let need_to_install_plugins = 1
endif

call plug#begin()
" Nerdtree plugin
Plug 'preservim/nerdtree'

" Sensible defaults
Plug 'tpope/vim-sensible'

" Commenting extension
Plug 'tpope/vim-commentary'

" git indicator in editor
Plug 'airblade/vim-gitgutter'

" Status bar
Plug 'itchyny/lightline.vim'

" Themes 
Plug 'arcticicestudio/nord-vim'
Plug 'morhetz/gruvbox'
Plug 'tlhr/anderson.vim'
Plug 'dracula/vim'
Plug 'phanviet/vim-monokai-pro'
Plug 'jacoborus/tender'
Plug 'haishanh/night-owl.vim'
Plug 'rafalbromirski/vim-aurora'

" Tabs
Plug 'ap/vim-buftabline'

" Vimtex
Plug 'lervag/vimtex'

" Telescope file finder / picker
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

" neovim language things
Plug 'neovim/nvim-lspconfig'
Plug 'williamboman/nvim-lsp-installer', {'branch': 'main'}

Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
" lua & third party sources -- See https://github.com/ms-jpq/coq.thirdparty
" Need to **configure separately**

" Nicer LSP UI
Plug 'tami5/lspsaga.nvim'
" Asynchronous shell scripts
Plug 'skywind3000/asyncrun.vim'

" Improved bullet points handling
Plug 'dkarter/bullets.vim'

" R Support
Plug 'jalvesaq/Nvim-R', {'branch': 'stable'}

call plug#end()

" Resizing stuff
nnoremap <silent> <Leader>= :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

filetype plugin indent on
syntax on

" Vimtex Stuff
" This enables Vim's and neovim's syntax-related features. Without this, some
" VimTeX features will not work (see ":help vimtex-requirements" for more
" info).
syntax enable
let g:vimtex_view_method = 'zathura'

" Viewer options: One may configure the viewer either by specifying a built-in
" viewer method:
" Or with a generic interface:
"let g:vimtex_view_general_viewer = 'okular'
"let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'

" VimTeX uses latexmk as the default compiler backend. If you use it, which is
" strongly recommended, you probably don't need to configure anything. If you
" want another compiler backend, you can change it as follows. The list of
" supported backends and further explanation is provided in the documentation,
" see ":help vimtex-compiler".
let g:vimtex_compiler_method = 'latexmk'
" Most VimTeX mappings rely on localleader and this can be changed with the
" following line. The default is usually fine and is the symbol "\".
let maplocalleader = ","

set clipboard+=unnamedplus

" Python coderunning snippets
autocmd FileType python map <buffer> ,p :w<CR>:exec '!python' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer> ,p <esc>:w<CR>:exec '!python' shellescape(@%, 1)<CR>


" Disables automatic commenting on newline:
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" Select one word on cursor:
  noremap <leader>c yiw
  noremap <leader>x diw
              
" Insert newline without going into insert mode
  nnoremap <CR> o<Esc>k
  nnoremap <BS> O<Esc>j

" Replace all aliased to S
  nnoremap S :%s//g<Left><Left>
" Count pattern aliased to C
  nnoremap C :%s///gn<Left><Left><Left><Left>

" Copy selected text to system clipboard
  noremap <C-c> "+y
  noremap <C-p> "+p

" Hotkeys for quickly saving and exiting documents and remapping
 inoremap jk <Esc>
 noremap <leader><CR> :wq<cr>
" noremap <leader><CR> :w!<cr>
" noremap <leader><BS> :q<cr>

" Map to disable vims evil autoindent (currenlty used in latex)
	nnoremap <F8> :setl noai nocin nosi inde=<CR>

" Navigating with guides
	inoremap <leader><leader> <Esc>/<Enter>"_c4l
	vnoremap <leader><leader> <Esc>/<Enter>"_c4l
	map <leader><leader> <Esc>/<++><Enter>"_c4l


if need_to_install_plugins == 1
    echo "Installing plugins..."
    silent! PlugInstall
    echo "Done!"
    q
endif

" gfiles shortcut
nnoremap <C-f> <cmd>Telescope find_files<cr>
nnoremap <C-g> <cmd>Telescope git_files<cr>

" always show the status bar
set laststatus=2

" enable 256 colors
set t_Co=256
set t_ut=

" turn on line numbering
set number

" sane text files
set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8

" sane editing
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent

" word movement
imap <S-Left> <Esc>bi
nmap <S-Left> b
imap <S-Right> <Esc><Right>wi
nmap <S-Right> w

" indent/unindent with tab/shift-tab
nmap <Tab> >>
imap <S-Tab> <Esc><<i
nmap <S-tab> <<

" mouse
set mouse=a
let g:is_mouse_enabled = 1
noremap <silent> <Leader>m :call ToggleMouse()<CR>
function ToggleMouse()
    if g:is_mouse_enabled == 1
        echo "Mouse OFF"
        set mouse=
        let g:is_mouse_enabled = 0
    else
        echo "Mouse ON"
        set mouse=a
        let g:is_mouse_enabled = 1
    endif
endfunction

" color scheme
syntax on
set termguicolors
set background=dark
colorscheme aurora
hi Normal guibg=NONE ctermbg=NONE


filetype plugin indent on

" lightline
set noshowmode
" let g:lightline = { 'colorscheme': 'aurora' }


" code folding
set foldmethod=indent
set foldlevel=99
"" Language-specific
"""" LaTeX

    " Runs a script that cleans out tex build files whenever I close out of a .tex file.
	autocmd VimLeave *.tex !texclear_mac -f % .

	" Word count:
	autocmd FileType tex map ,wc :w !detex \| wc -w<CR>
	" Folding
	autocmd FileType tex nnoremap fs <Space> za
    	let g:tex_fold_additional_envs = ['abstract']
	autocmd FileType tex setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
	" Compilation
"	autocmd FileType tex map <leader>q :AsyncRun latexmk -pdf -pvc % <cr>
	map <leader>q :w! \| !compiler_mac <c-r>%<CR><CR>
	map <leader>p :!opout <c-r>%<CR><CR>

""" Python
	" Docstrings
	autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab

""" C
	autocmd FileType c,h setlocal cindent shiftwidth=4 expandtab """tabstop=4 shiftwidth=4 softtabstop=4
	autocmd Filetype c,h nnoremap <C><CR> :make!<cr>
"" html
	autocmd FileType html,css,html.tmpl setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
 "____        _                  _
"/ ___| _ __ (_)_ __  _ __   ___| |_ ___
"\___ \| '_ \| | '_ \| '_ \ / _ \ __/ __|
 "___) | | | | | |_) | |_) |  __/ |_\__ \
"|____/|_| |_|_| .__/| .__/ \___|\__|___/
              "|_|   |_|

"""LaTeX
    " Automatic new line every 80 chars 
    autocmd FileType txt,markdown,tex set colorcolumn=80
    autocmd FileType txt,markdown,tex set viminfo='25,\"50,n~/.viminfo
    autocmd FileType txt,markdown,tex set tw=79
	" General snippets
	autocmd FileType tex inoremap ,em \emph{}<++><Esc>T{i
	autocmd FileType tex inoremap ,bf \textbf{}<++><Esc>T{i
	autocmd FileType tex inoremap ,ci \cite{}<++><Esc>T{i
	autocmd FileType tex inoremap ,it \textit{}<++><Esc>T{i
	autocmd FileType tex inoremap ,hl \hl{}<++><Esc>T{i
	autocmd FileType tex inoremap ,ol \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
	autocmd FileType tex inoremap ,ul \begin{itemize}<Enter><Enter>\end{itemize}<Enter><Enter><++><Esc>3kA\item<Space>
	autocmd FileType tex inoremap ,li <Enter>\item<Space>
	autocmd FileType tex inoremap ,sec \section{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,ssec \subsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,sssec \subsubsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,fig \begin{figure}[h!]<Enter><Enter>\centering<Enter>\includegraphics[width=<++>\textwidth,height=<++>\textheight]{<++>}<Enter>\caption{<++>}<Enter><Enter>\end{figure}<Enter><Esc>6kfi
	" Beamer
	autocmd FileType tex inoremap ,fr \begin{frame}[t]{<++>}<Enter><++><Enter><Enter>\end{frame}<Enter><Enter><++>
	autocmd FileType tex inoremap ,tk \begin{tikzpicture}<Enter>\draw <++><Enter>\end{tikzpicture}<Enter><++><Esc>6kf}i

	" References
	autocmd FileType tex inoremap ,rr \ref{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,rf (Figure~\ref{fig:}<++>)<++><Esc>T:i
	autocmd FileType tex inoremap ,rt (Table~\ref{tab:})<++><Esc>T:i
	autocmd FileType tex inoremap ,rs (Section~\ref{sec:})<++><Esc>T:i
	autocmd FileType tex inoremap ,re \eqref{eq:}<++><Esc>T:i
	autocmd FileType tex inoremap ,ct \supercite{}<++><Esc>T{i
	" Not using currently
	autocmd FileType tex inoremap ,fi \begin{fitch}<Enter><Enter>\end{fitch}<Enter><Enter><++><Esc>3kA
	autocmd FileType tex inoremap ,exe \begin{exe}<Enter>\ex<Space><Enter>\end{exe}<Enter><Enter><++><Esc>3kA
	autocmd FileType tex vnoremap , <ESC>`<i\{<ESC>`>2la}<ESC>?\\{<Enter>a
	autocmd FileType tex inoremap ,tab \begin{tabular}<Enter><++><Enter>\end{tabular}<Enter><Enter><++><Esc>4kA{}<Esc>i
	autocmd FileType tex inoremap ,- \item<Space>

	function! WC()
		let filename = expand("%")
		let cmd = "detex " . filename . " | wc -w | tr -d [:space:]"
		let result = system(cmd)
		echo result . " words"
	endfunction

	command WC call WC()

"MARKDOWN
	autocmd Filetype markdown,rmd map <leader>w yiWi[<esc>Ea](<esc>pa)
	autocmd Filetype markdown,rmd inoremap ,n ---<Enter><Enter>
	autocmd Filetype markdown,rmd inoremap ,b ****<++><Esc>F*hi
	autocmd Filetype markdown,rmd inoremap ,s ~~~~<++><Esc>F~hi
	autocmd Filetype markdown,rmd inoremap ,e **<++><Esc>F*i
	autocmd Filetype markdown,rmd inoremap ,h ====<Space><++><Esc>F=hi
	autocmd Filetype markdown,rmd inoremap ,i ![](<++>)<++><Esc>F[a
	autocmd Filetype markdown,rmd inoremap ,a [](<++>)<++><Esc>F[a
	autocmd Filetype markdown,rmd inoremap ,1 #<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap ,2 ##<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap ,3 ###<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap ,l --------<Enter>
	autocmd Filetype rmd inoremap ,r ```{r}<CR>```<CR><CR><esc>2kO
	autocmd Filetype rmd inoremap ,p ```{python}<CR>```<CR><CR><esc>2kO
	autocmd Filetype rmd inoremap ,c ```<cr>```<cr><cr><esc>2kO
	autocmd Filetype markdown,rmd inoremap ,cl ``<++><Esc>F`i
	autocmd Filetype markdown,rmd inoremap ,cb ~~~<Enter><Enter>~~~<Enter><++><Esc>2ki

	autocmd Filetype markdown,rmd inoremap ,ul $\mu L$<Space><Esc>i
	autocmd Filetype markdown,rmd inoremap ,um $\mu m$<Space><Esc>i
	autocmd Filetype markdown,rmd inoremap ,ug $\mu L$<Space><Esc>i
	autocmd Filetype markdown,rmd inoremap ,uM $\mu M$<Space><Esc>i
	autocmd Filetype markdown,rmd inoremap ,mu $\mu$<Space><Esc>i
	autocmd Filetype markdown,rmd inoremap ,phi $\phi$<Space><Esc>i
	autocmd Filetype markdown,rmd inoremap ,alp $\alpha$<Space><Esc>i
	autocmd Filetype markdown,rmd inoremap ,beta $\beta$<Space><Esc>i
	autocmd Filetype markdown,rmd inoremap ,lam $\lambda$<Space><Esc>i
	autocmd Filetype markdown,rmd inoremap ,deg &deg;<Space><Esc>i


" wrap toggle
setlocal nowrap
noremap <silent> <Leader>w :call ToggleWrap()<CR>
function ToggleWrap()
    if &wrap
        echo "Wrap OFF"
        setlocal nowrap
        set virtualedit=all
        silent! nunmap <buffer> <Up>
        silent! nunmap <buffer> <Down>
        silent! nunmap <buffer> <Home>
        silent! nunmap <buffer> <End>
        silent! iunmap <buffer> <Up>
        silent! iunmap <buffer> <Down>
        silent! iunmap <buffer> <Home>
        silent! iunmap <buffer> <End>
    else
        echo "Wrap ON"
        setlocal wrap linebreak nolist
        set virtualedit=
        setlocal display+=lastline
        noremap  <buffer> <silent> <Up>   gk
        noremap  <buffer> <silent> <Down> gj
        noremap  <buffer> <silent> <Home> g<Home>
        noremap  <buffer> <silent> <End>  g<End>
        inoremap <buffer> <silent> <Up>   <C-o>gk
        inoremap <buffer> <silent> <Down> <C-o>gj
        inoremap <buffer> <silent> <Home> <C-o>g<Home>
        inoremap <buffer> <silent> <End>  <C-o>g<End>
    endif
endfunction

" move through split windows
nmap <leader><Up> :wincmd k<CR>
nmap <leader><Down> :wincmd j<CR>
nmap <leader><Left> :wincmd h<CR>
nmap <leader><Right> :wincmd l<CR>

" move through buffers
nmap <leader>[ :bp!<CR>
nmap <leader>] :bn!<CR>
"nmap <leader>x :bd<CR>

" restore place in file from previous session
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" tag list
map <leader>t :TagbarToggle<CR>

" copy, cut and paste
vmap <C-c> "+y
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" disable autoindent when pasting text
" source: https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" file browser
" let NERDTreeIgnore = ['\.pyc$', '__pycache__']
" let NERDTreeMinimalUI = 1
" let g:nerdtree_open = 0
" map <leader>t :call NERDTreeToggle()<CR>
" function NERDTreeToggle()
"     NERDTreeTabsToggle
"     if g:nerdtree_open == 1
"         let g:nerdtree_open = 0
"     else
"         let g:nerdtree_open = 1
"         wincmd p
"     endif
" endfunction
" let NERDTreeShowHidden=1
" " NERDTree setting defaults to work around http://github.com/scrooloose/nerdtree/issues/489
" let g:NERDTreeDirArrows = 1
" let g:NERDTreeDirArrowExpandable = '▸'
" let g:NERDTreeDirArrowCollapsible = '▾'
" let g:NERDTreeGlyphReadOnly = "RO"


" CPP stuff
nnoremap <silent> ,cp :update<cr>:make %<<cr>:!./%<<cr>

" R Stuff
let R_nvimpager = "horizontal"
let R_csv_app = 'terminal:vd'
let R_app = "radian"
let R_cmd = "R"
let R_hl_term = 0
let R_args = []  " if you had set any
let R_bracketed_paste = 1
let R_assign = 0


set completeopt=menuone,noinsert,noselect
" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" run chezmoi apply whenever you save a dotfile #
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path %

" Hightlight on yank
" From https://neovim.io/news/2021/07
au TextYankPost * lua vim.highlight.on_yank {higroup="IncSearch", timeout=150, on_visual=true}

" This is more LSP Stuff "

lua <<EOF

local lspsaga = require 'lspsaga'
lspsaga.setup { -- defaults ...
  debug = false,
  use_saga_diagnostic_sign = true,
  -- diagnostic sign
  error_sign = "",
  warn_sign = "",
  hint_sign = "",
  infor_sign = "",
  diagnostic_header_icon = "   ",
  -- code action title icon
  code_action_icon = " ",
  code_action_prompt = {
    enable = true,
    sign = true,
    sign_priority = 40,
    virtual_text = true,
  },
  finder_definition_icon = "  ",
  finder_reference_icon = "  ",
  max_preview_lines = 10,
  finder_action_keys = {
    open = "o",
    vsplit = "s",
    split = "i",
    quit = "q",
    scroll_down = "<C-f>",
    scroll_up = "<C-b>",
  },
  code_action_keys = {
    quit = "q",
    exec = "<CR>",
  },
  rename_action_keys = {
    quit = "<C-c>",
    exec = "<CR>",
  },
  definition_preview_icon = "  ",
  border_style = "single",
  rename_prompt_prefix = "➤",
  rename_output_qflist = {
    enable = false,
    auto_open_qflist = false,
  },
  server_filetype_map = {},
  diagnostic_prefix_format = "%d. ",
  diagnostic_message_format = "%m %c",
  highlight_prefix = false,
}

--- In lsp attach function
local map = vim.api.nvim_buf_set_keymap
map(0, "n", "gr", "<cmd>Lspsaga rename<cr>", {silent = true, noremap = true})
map(0, "n", "gx", "<cmd>Lspsaga code_action<cr>", {silent = true, noremap = true})
map(0, "x", "gx", ":<c-u>Lspsaga range_code_action<cr>", {silent = true, noremap = true})
map(0, "n", "K",  "<cmd>Lspsaga hover_doc<cr>", {silent = true, noremap = true})
map(0, "n", "gd", "<cmd>lua require('lspsaga.action').smart_scroll_with_saga(-1, '<c-u>')<cr>", {})
map(0, "n", "gD", "<cmd>lua require('lspsaga.action').smart_scroll_with_saga(1, '<c-d>')<cr>", {})

-- Automatically start coq
local nvim_lsp = require('lspconfig')
local coq = require("coq")


--lsp installer
local lsp_installer = require("nvim-lsp-installer")
lsp_installer.on_server_ready(function(server)
    local opts = {}
    server:setup(opts)
end)

-- Enable some language servers with the additional completion capabilities offered by coq_nvim
local servers = { 'pyright', 'zk', 'ccls', 'texlab', 'r_language_server', 'clangd' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup(require('coq').lsp_ensure_capabilities({
    on_attach = on_attach,
    flags = {debounce_text_changes = 150},
  }))
end

vim.cmd('COQnow -s')
EOF
